// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Rating defines model for Rating.
type Rating struct {
	// Stars Количество здесь у пользователя
	Stars int `json:"stars"`
}

// GetParams defines parameters for Get.
type GetParams struct {
	// XUserName Имя пользователя
	XUserName string `json:"X-User-Name"`
}

// SaveViolationsParams defines parameters for SaveViolations.
type SaveViolationsParams struct {
	Count int `form:"count" json:"count"`

	// XUserName Имя пользователя
	XUserName string `json:"X-User-Name"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить информацию по рейтингу пользователя
	// (GET /api/v1/rating)
	Get(ctx echo.Context, params GetParams) error
	// Опустить или поднять рейтинг пользователя в зависимости от нарушений
	// (POST /api/v1/rating/violation)
	SaveViolations(ctx echo.Context, params SaveViolationsParams) error
	// Проверка живости сервиса
	// (GET /manage/health)
	Health(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-User-Name" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-Name")]; found {
		var XUserName string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-User-Name, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-Name", valueList[0], &XUserName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-User-Name: %s", err))
		}

		params.XUserName = XUserName
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-User-Name is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get(ctx, params)
	return err
}

// SaveViolations converts echo context to params.
func (w *ServerInterfaceWrapper) SaveViolations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SaveViolationsParams
	// ------------- Required query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, true, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-User-Name" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-Name")]; found {
		var XUserName string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-User-Name, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-User-Name", valueList[0], &XUserName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-User-Name: %s", err))
		}

		params.XUserName = XUserName
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-User-Name is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SaveViolations(ctx, params)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/rating", wrapper.Get)
	router.POST(baseURL+"/api/v1/rating/violation", wrapper.SaveViolations)
	router.GET(baseURL+"/manage/health", wrapper.Health)

}

type GetRequestObject struct {
	Params GetParams
}

type GetResponseObject interface {
	VisitGetResponse(w http.ResponseWriter) error
}

type Get200JSONResponse Rating

func (response Get200JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SaveViolationsRequestObject struct {
	Params SaveViolationsParams
}

type SaveViolationsResponseObject interface {
	VisitSaveViolationsResponse(w http.ResponseWriter) error
}

type SaveViolations204Response struct {
}

func (response SaveViolations204Response) VisitSaveViolationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200Response struct {
}

func (response Health200Response) VisitHealthResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Получить информацию по рейтингу пользователя
	// (GET /api/v1/rating)
	Get(ctx context.Context, request GetRequestObject) (GetResponseObject, error)
	// Опустить или поднять рейтинг пользователя в зависимости от нарушений
	// (POST /api/v1/rating/violation)
	SaveViolations(ctx context.Context, request SaveViolationsRequestObject) (SaveViolationsResponseObject, error)
	// Проверка живости сервиса
	// (GET /manage/health)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Get operation middleware
func (sh *strictHandler) Get(ctx echo.Context, params GetParams) error {
	var request GetRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Get(ctx.Request().Context(), request.(GetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetResponseObject); ok {
		return validResponse.VisitGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SaveViolations operation middleware
func (sh *strictHandler) SaveViolations(ctx echo.Context, params SaveViolationsParams) error {
	var request SaveViolationsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SaveViolations(ctx.Request().Context(), request.(SaveViolationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SaveViolations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SaveViolationsResponseObject); ok {
		return validResponse.VisitSaveViolationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Health operation middleware
func (sh *strictHandler) Health(ctx echo.Context) error {
	var request HealthRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx.Request().Context(), request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		return validResponse.VisitHealthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
