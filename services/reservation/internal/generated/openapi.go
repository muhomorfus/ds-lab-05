// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BookReservationResponseStatus.
const (
	BookReservationResponseStatusEXPIRED  BookReservationResponseStatus = "EXPIRED"
	BookReservationResponseStatusRENTED   BookReservationResponseStatus = "RENTED"
	BookReservationResponseStatusRETURNED BookReservationResponseStatus = "RETURNED"
)

// Defines values for TakeBookResponseStatus.
const (
	TakeBookResponseStatusEXPIRED  TakeBookResponseStatus = "EXPIRED"
	TakeBookResponseStatusLOST     TakeBookResponseStatus = "LOST"
	TakeBookResponseStatusRENTED   TakeBookResponseStatus = "RENTED"
	TakeBookResponseStatusRETURNED TakeBookResponseStatus = "RETURNED"
)

// BookReservationResponse defines model for BookReservationResponse.
type BookReservationResponse struct {
	// BookUid UUID книги
	BookUid openapi_types.UUID `json:"bookUid"`

	// LibraryUid UUID библиотеки
	LibraryUid openapi_types.UUID `json:"libraryUid"`

	// ReservationUid UUID бронирования
	ReservationUid openapi_types.UUID `json:"reservationUid"`

	// StartDate Дата начала бронирования
	StartDate string `json:"startDate"`

	// Status Статус бронирования книги
	Status BookReservationResponseStatus `json:"status"`

	// TillDate Дата окончания бронирования
	TillDate string `json:"tillDate"`
}

// BookReservationResponseStatus Статус бронирования книги
type BookReservationResponseStatus string

// ErrorDescription defines model for ErrorDescription.
type ErrorDescription struct {
	Error string `json:"error"`
	Field string `json:"field"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Информация об ошибке
	Message string `json:"message"`
}

// FinishReservationRequest defines model for FinishReservationRequest.
type FinishReservationRequest struct {
	// Date Дата возврата
	Date string `json:"date"`
}

// FinishReservationResponse defines model for FinishReservationResponse.
type FinishReservationResponse struct {
	// Violation Нарушены ли правила окончания брони
	Violation bool `json:"violation"`
}

// TakeBookRequest defines model for TakeBookRequest.
type TakeBookRequest struct {
	// BookUid UUID книги
	BookUid openapi_types.UUID `json:"bookUid"`

	// LibraryUid UUID библиотеки
	LibraryUid openapi_types.UUID `json:"libraryUid"`

	// TillDate Дата окончания бронирования
	TillDate string `json:"tillDate"`
}

// TakeBookResponse defines model for TakeBookResponse.
type TakeBookResponse struct {
	// BookUid UUID книги
	BookUid openapi_types.UUID `json:"bookUid"`

	// LibraryUid UUID библиотеки
	LibraryUid openapi_types.UUID `json:"libraryUid"`

	// ReservationUid UUID бронирования
	ReservationUid openapi_types.UUID `json:"reservationUid"`

	// StartDate Дата начала бронирования
	StartDate string `json:"startDate"`

	// Status Статус бронирования книги
	Status TakeBookResponseStatus `json:"status"`

	// TillDate Дата окончания бронирования
	TillDate string `json:"tillDate"`
}

// TakeBookResponseStatus Статус бронирования книги
type TakeBookResponseStatus string

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	// Errors Массив полей с описанием ошибки
	Errors []ErrorDescription `json:"errors"`

	// Message Информация об ошибке
	Message string `json:"message"`
}

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = TakeBookRequest

// FinishJSONRequestBody defines body for Finish for application/json ContentType.
type FinishJSONRequestBody = FinishReservationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить информацию по всем взятым в прокат книгам пользователя
	// (GET /api/v1/reservations)
	List(ctx echo.Context) error
	// Взять книгу в библиотеке
	// (POST /api/v1/reservations)
	Create(ctx echo.Context) error
	// Получить информацию конкретно взятому бронированию
	// (GET /api/v1/reservations/{reservationUid})
	Get(ctx echo.Context, reservationUid openapi_types.UUID) error
	// Отменить бронирование
	// (POST /api/v1/reservations/{reservationUid}/cancel)
	Cancel(ctx echo.Context, reservationUid openapi_types.UUID) error
	// Вернуть книгу
	// (POST /api/v1/reservations/{reservationUid}/return)
	Finish(ctx echo.Context, reservationUid openapi_types.UUID) error
	// Проверка живости сервиса
	// (GET /manage/health)
	Health(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.List(ctx)
	return err
}

// Create converts echo context to params.
func (w *ServerInterfaceWrapper) Create(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Create(ctx)
	return err
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reservationUid" -------------
	var reservationUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reservationUid", ctx.Param("reservationUid"), &reservationUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationUid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get(ctx, reservationUid)
	return err
}

// Cancel converts echo context to params.
func (w *ServerInterfaceWrapper) Cancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reservationUid" -------------
	var reservationUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reservationUid", ctx.Param("reservationUid"), &reservationUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationUid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Cancel(ctx, reservationUid)
	return err
}

// Finish converts echo context to params.
func (w *ServerInterfaceWrapper) Finish(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reservationUid" -------------
	var reservationUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reservationUid", ctx.Param("reservationUid"), &reservationUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationUid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Finish(ctx, reservationUid)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/reservations", wrapper.List)
	router.POST(baseURL+"/api/v1/reservations", wrapper.Create)
	router.GET(baseURL+"/api/v1/reservations/:reservationUid", wrapper.Get)
	router.POST(baseURL+"/api/v1/reservations/:reservationUid/cancel", wrapper.Cancel)
	router.POST(baseURL+"/api/v1/reservations/:reservationUid/return", wrapper.Finish)
	router.GET(baseURL+"/manage/health", wrapper.Health)

}

type ListRequestObject struct {
}

type ListResponseObject interface {
	VisitListResponse(w http.ResponseWriter) error
}

type List200JSONResponse []BookReservationResponse

func (response List200JSONResponse) VisitListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRequestObject struct {
	Body *CreateJSONRequestBody
}

type CreateResponseObject interface {
	VisitCreateResponse(w http.ResponseWriter) error
}

type Create200JSONResponse TakeBookResponse

func (response Create200JSONResponse) VisitCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Create400JSONResponse ValidationErrorResponse

func (response Create400JSONResponse) VisitCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRequestObject struct {
	ReservationUid openapi_types.UUID `json:"reservationUid"`
}

type GetResponseObject interface {
	VisitGetResponse(w http.ResponseWriter) error
}

type Get200JSONResponse BookReservationResponse

func (response Get200JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Get404JSONResponse ErrorResponse

func (response Get404JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CancelRequestObject struct {
	ReservationUid openapi_types.UUID `json:"reservationUid"`
}

type CancelResponseObject interface {
	VisitCancelResponse(w http.ResponseWriter) error
}

type Cancel204Response struct {
}

func (response Cancel204Response) VisitCancelResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type FinishRequestObject struct {
	ReservationUid openapi_types.UUID `json:"reservationUid"`
	Body           *FinishJSONRequestBody
}

type FinishResponseObject interface {
	VisitFinishResponse(w http.ResponseWriter) error
}

type Finish200JSONResponse FinishReservationResponse

func (response Finish200JSONResponse) VisitFinishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Finish404JSONResponse ErrorResponse

func (response Finish404JSONResponse) VisitFinishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200Response struct {
}

func (response Health200Response) VisitHealthResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Получить информацию по всем взятым в прокат книгам пользователя
	// (GET /api/v1/reservations)
	List(ctx context.Context, request ListRequestObject) (ListResponseObject, error)
	// Взять книгу в библиотеке
	// (POST /api/v1/reservations)
	Create(ctx context.Context, request CreateRequestObject) (CreateResponseObject, error)
	// Получить информацию конкретно взятому бронированию
	// (GET /api/v1/reservations/{reservationUid})
	Get(ctx context.Context, request GetRequestObject) (GetResponseObject, error)
	// Отменить бронирование
	// (POST /api/v1/reservations/{reservationUid}/cancel)
	Cancel(ctx context.Context, request CancelRequestObject) (CancelResponseObject, error)
	// Вернуть книгу
	// (POST /api/v1/reservations/{reservationUid}/return)
	Finish(ctx context.Context, request FinishRequestObject) (FinishResponseObject, error)
	// Проверка живости сервиса
	// (GET /manage/health)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// List operation middleware
func (sh *strictHandler) List(ctx echo.Context) error {
	var request ListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.List(ctx.Request().Context(), request.(ListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "List")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListResponseObject); ok {
		return validResponse.VisitListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Create operation middleware
func (sh *strictHandler) Create(ctx echo.Context) error {
	var request CreateRequestObject

	var body CreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Create(ctx.Request().Context(), request.(CreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Create")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateResponseObject); ok {
		return validResponse.VisitCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Get operation middleware
func (sh *strictHandler) Get(ctx echo.Context, reservationUid openapi_types.UUID) error {
	var request GetRequestObject

	request.ReservationUid = reservationUid

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Get(ctx.Request().Context(), request.(GetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetResponseObject); ok {
		return validResponse.VisitGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Cancel operation middleware
func (sh *strictHandler) Cancel(ctx echo.Context, reservationUid openapi_types.UUID) error {
	var request CancelRequestObject

	request.ReservationUid = reservationUid

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Cancel(ctx.Request().Context(), request.(CancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Cancel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CancelResponseObject); ok {
		return validResponse.VisitCancelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Finish operation middleware
func (sh *strictHandler) Finish(ctx echo.Context, reservationUid openapi_types.UUID) error {
	var request FinishRequestObject

	request.ReservationUid = reservationUid

	var body FinishJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Finish(ctx.Request().Context(), request.(FinishRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Finish")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FinishResponseObject); ok {
		return validResponse.VisitFinishResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Health operation middleware
func (sh *strictHandler) Health(ctx echo.Context) error {
	var request HealthRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx.Request().Context(), request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		return validResponse.VisitHealthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
