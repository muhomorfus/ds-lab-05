// Package library provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package library

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for LibraryBookResponseCondition.
const (
	LibraryBookResponseConditionBAD       LibraryBookResponseCondition = "BAD"
	LibraryBookResponseConditionEXCELLENT LibraryBookResponseCondition = "EXCELLENT"
	LibraryBookResponseConditionGOOD      LibraryBookResponseCondition = "GOOD"
)

// Defines values for ReturnBookRequestCondition.
const (
	ReturnBookRequestConditionBAD       ReturnBookRequestCondition = "BAD"
	ReturnBookRequestConditionEXCELLENT ReturnBookRequestCondition = "EXCELLENT"
	ReturnBookRequestConditionGOOD      ReturnBookRequestCondition = "GOOD"
)

// BookInfo defines model for BookInfo.
type BookInfo struct {
	// Author Автор
	Author string `json:"author"`

	// BookUid UUID книги
	BookUid openapi_types.UUID `json:"bookUid"`

	// Genre Жанр
	Genre string `json:"genre"`

	// Name Название книги
	Name string `json:"name"`
}

// ErrorDescription defines model for ErrorDescription.
type ErrorDescription struct {
	Error string `json:"error"`
	Field string `json:"field"`
}

// LibraryBookPaginationResponse defines model for LibraryBookPaginationResponse.
type LibraryBookPaginationResponse struct {
	Items []LibraryBookResponse `json:"items"`

	// Page Номер страницы
	Page *int `json:"page,omitempty"`

	// PageSize Количество элементов на странице
	PageSize *int `json:"pageSize,omitempty"`

	// TotalElements Общее количество элементов
	TotalElements int `json:"totalElements"`
}

// LibraryBookResponse defines model for LibraryBookResponse.
type LibraryBookResponse struct {
	// Author Автор
	Author string `json:"author"`

	// AvailableCount Количество книг, доступных для аренды в библиотеке
	AvailableCount int `json:"availableCount"`

	// BookUid UUID книги
	BookUid openapi_types.UUID `json:"bookUid"`

	// Condition Состояние книги
	Condition LibraryBookResponseCondition `json:"condition"`

	// Genre Жанр
	Genre string `json:"genre"`

	// Name Название книги
	Name string `json:"name"`
}

// LibraryBookResponseCondition Состояние книги
type LibraryBookResponseCondition string

// LibraryPaginationResponse defines model for LibraryPaginationResponse.
type LibraryPaginationResponse struct {
	Items []LibraryResponse `json:"items"`

	// Page Номер страницы
	Page *int `json:"page,omitempty"`

	// PageSize Количество элементов на странице
	PageSize *int `json:"pageSize,omitempty"`

	// TotalElements Общее количество элементов
	TotalElements int `json:"totalElements"`
}

// LibraryResponse defines model for LibraryResponse.
type LibraryResponse struct {
	// Address Адрес библиотеки
	Address string `json:"address"`

	// City Город, в котором находится библиотека
	City string `json:"city"`

	// LibraryUid UUID библиотеки
	LibraryUid openapi_types.UUID `json:"libraryUid"`

	// Name Название библиотеки
	Name string `json:"name"`
}

// ReturnBookRequest defines model for ReturnBookRequest.
type ReturnBookRequest struct {
	// Condition Состояние книги
	Condition ReturnBookRequestCondition `json:"condition"`
}

// ReturnBookRequestCondition Состояние книги
type ReturnBookRequestCondition string

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	// Errors Массив полей с описанием ошибки
	Errors []ErrorDescription `json:"errors"`

	// Message Информация об ошибке
	Message string `json:"message"`
}

// ViolationStatus defines model for ViolationStatus.
type ViolationStatus struct {
	// Violation Нарушены ли правила возврата книг
	Violation bool `json:"violation"`
}

// ListLibrariesParams defines parameters for ListLibraries.
type ListLibrariesParams struct {
	Page *int `form:"page,omitempty" json:"page,omitempty"`
	Size *int `form:"size,omitempty" json:"size,omitempty"`

	// City Город
	City string `form:"city" json:"city"`
}

// ListBooksParams defines parameters for ListBooks.
type ListBooksParams struct {
	Page    *int  `form:"page,omitempty" json:"page,omitempty"`
	Size    *int  `form:"size,omitempty" json:"size,omitempty"`
	ShowAll *bool `form:"showAll,omitempty" json:"showAll,omitempty"`
}

// ReturnBookJSONRequestBody defines body for ReturnBook for application/json ContentType.
type ReturnBookJSONRequestBody = ReturnBookRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBook request
	GetBook(ctx context.Context, bookUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLibraries request
	ListLibraries(ctx context.Context, params *ListLibrariesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLibrary request
	GetLibrary(ctx context.Context, libraryUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBooks request
	ListBooks(ctx context.Context, libraryUid openapi_types.UUID, params *ListBooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TakeBook request
	TakeBook(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReturnBookWithBody request with any body
	ReturnBookWithBody(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReturnBook(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, body ReturnBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Health request
	Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBook(ctx context.Context, bookUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookRequest(c.Server, bookUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLibraries(ctx context.Context, params *ListLibrariesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLibrariesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLibrary(ctx context.Context, libraryUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLibraryRequest(c.Server, libraryUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBooks(ctx context.Context, libraryUid openapi_types.UUID, params *ListBooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBooksRequest(c.Server, libraryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TakeBook(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTakeBookRequest(c.Server, libraryUid, bookUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReturnBookWithBody(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReturnBookRequestWithBody(c.Server, libraryUid, bookUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReturnBook(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, body ReturnBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReturnBookRequest(c.Server, libraryUid, bookUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBookRequest generates requests for GetBook
func NewGetBookRequest(server string, bookUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookUid", runtime.ParamLocationPath, bookUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLibrariesRequest generates requests for ListLibraries
func NewListLibrariesRequest(server string, params *ListLibrariesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/libraries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city", runtime.ParamLocationQuery, params.City); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLibraryRequest generates requests for GetLibrary
func NewGetLibraryRequest(server string, libraryUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "libraryUid", runtime.ParamLocationPath, libraryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/libraries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBooksRequest generates requests for ListBooks
func NewListBooksRequest(server string, libraryUid openapi_types.UUID, params *ListBooksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "libraryUid", runtime.ParamLocationPath, libraryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/libraries/%s/books", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowAll != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showAll", runtime.ParamLocationQuery, *params.ShowAll); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTakeBookRequest generates requests for TakeBook
func NewTakeBookRequest(server string, libraryUid openapi_types.UUID, bookUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "libraryUid", runtime.ParamLocationPath, libraryUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookUid", runtime.ParamLocationPath, bookUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/libraries/%s/books/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReturnBookRequest calls the generic ReturnBook builder with application/json body
func NewReturnBookRequest(server string, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, body ReturnBookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReturnBookRequestWithBody(server, libraryUid, bookUid, "application/json", bodyReader)
}

// NewReturnBookRequestWithBody generates requests for ReturnBook with any type of body
func NewReturnBookRequestWithBody(server string, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "libraryUid", runtime.ParamLocationPath, libraryUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookUid", runtime.ParamLocationPath, bookUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/libraries/%s/books/%s/return", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHealthRequest generates requests for Health
func NewHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manage/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBookWithResponse request
	GetBookWithResponse(ctx context.Context, bookUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetBookResponse, error)

	// ListLibrariesWithResponse request
	ListLibrariesWithResponse(ctx context.Context, params *ListLibrariesParams, reqEditors ...RequestEditorFn) (*ListLibrariesResponse, error)

	// GetLibraryWithResponse request
	GetLibraryWithResponse(ctx context.Context, libraryUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryResponse, error)

	// ListBooksWithResponse request
	ListBooksWithResponse(ctx context.Context, libraryUid openapi_types.UUID, params *ListBooksParams, reqEditors ...RequestEditorFn) (*ListBooksResponse, error)

	// TakeBookWithResponse request
	TakeBookWithResponse(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*TakeBookResponse, error)

	// ReturnBookWithBodyWithResponse request with any body
	ReturnBookWithBodyWithResponse(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReturnBookResponse, error)

	ReturnBookWithResponse(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, body ReturnBookJSONRequestBody, reqEditors ...RequestEditorFn) (*ReturnBookResponse, error)

	// HealthWithResponse request
	HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error)
}

type GetBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BookInfo
}

// Status returns HTTPResponse.Status
func (r GetBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLibrariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LibraryPaginationResponse
}

// Status returns HTTPResponse.Status
func (r ListLibrariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLibrariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LibraryResponse
}

// Status returns HTTPResponse.Status
func (r GetLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LibraryBookPaginationResponse
}

// Status returns HTTPResponse.Status
func (r ListBooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TakeBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ValidationErrorResponse
}

// Status returns HTTPResponse.Status
func (r TakeBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TakeBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReturnBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ViolationStatus
	JSON400      *ValidationErrorResponse
}

// Status returns HTTPResponse.Status
func (r ReturnBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReturnBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBookWithResponse request returning *GetBookResponse
func (c *ClientWithResponses) GetBookWithResponse(ctx context.Context, bookUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetBookResponse, error) {
	rsp, err := c.GetBook(ctx, bookUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookResponse(rsp)
}

// ListLibrariesWithResponse request returning *ListLibrariesResponse
func (c *ClientWithResponses) ListLibrariesWithResponse(ctx context.Context, params *ListLibrariesParams, reqEditors ...RequestEditorFn) (*ListLibrariesResponse, error) {
	rsp, err := c.ListLibraries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLibrariesResponse(rsp)
}

// GetLibraryWithResponse request returning *GetLibraryResponse
func (c *ClientWithResponses) GetLibraryWithResponse(ctx context.Context, libraryUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryResponse, error) {
	rsp, err := c.GetLibrary(ctx, libraryUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLibraryResponse(rsp)
}

// ListBooksWithResponse request returning *ListBooksResponse
func (c *ClientWithResponses) ListBooksWithResponse(ctx context.Context, libraryUid openapi_types.UUID, params *ListBooksParams, reqEditors ...RequestEditorFn) (*ListBooksResponse, error) {
	rsp, err := c.ListBooks(ctx, libraryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBooksResponse(rsp)
}

// TakeBookWithResponse request returning *TakeBookResponse
func (c *ClientWithResponses) TakeBookWithResponse(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*TakeBookResponse, error) {
	rsp, err := c.TakeBook(ctx, libraryUid, bookUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTakeBookResponse(rsp)
}

// ReturnBookWithBodyWithResponse request with arbitrary body returning *ReturnBookResponse
func (c *ClientWithResponses) ReturnBookWithBodyWithResponse(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReturnBookResponse, error) {
	rsp, err := c.ReturnBookWithBody(ctx, libraryUid, bookUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReturnBookResponse(rsp)
}

func (c *ClientWithResponses) ReturnBookWithResponse(ctx context.Context, libraryUid openapi_types.UUID, bookUid openapi_types.UUID, body ReturnBookJSONRequestBody, reqEditors ...RequestEditorFn) (*ReturnBookResponse, error) {
	rsp, err := c.ReturnBook(ctx, libraryUid, bookUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReturnBookResponse(rsp)
}

// HealthWithResponse request returning *HealthResponse
func (c *ClientWithResponses) HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error) {
	rsp, err := c.Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthResponse(rsp)
}

// ParseGetBookResponse parses an HTTP response from a GetBookWithResponse call
func ParseGetBookResponse(rsp *http.Response) (*GetBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BookInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListLibrariesResponse parses an HTTP response from a ListLibrariesWithResponse call
func ParseListLibrariesResponse(rsp *http.Response) (*ListLibrariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLibrariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LibraryPaginationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLibraryResponse parses an HTTP response from a GetLibraryWithResponse call
func ParseGetLibraryResponse(rsp *http.Response) (*GetLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LibraryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBooksResponse parses an HTTP response from a ListBooksWithResponse call
func ParseListBooksResponse(rsp *http.Response) (*ListBooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LibraryBookPaginationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTakeBookResponse parses an HTTP response from a TakeBookWithResponse call
func ParseTakeBookResponse(rsp *http.Response) (*TakeBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TakeBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ValidationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseReturnBookResponse parses an HTTP response from a ReturnBookWithResponse call
func ParseReturnBookResponse(rsp *http.Response) (*ReturnBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReturnBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ViolationStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ValidationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseHealthResponse parses an HTTP response from a HealthWithResponse call
func ParseHealthResponse(rsp *http.Response) (*HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
